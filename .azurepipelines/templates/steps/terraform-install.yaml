parameters:
  - name: StepsName
    type: string
    default: 'InstallTenvAndTerraform'
  - name: StepsDisplayName
    type: string
    default: 'Install tenv & desired Terraform version'
  - name: TerraformVersion
    type: string
    default: 'latest'
  - name: additionalEnvVars
    type: object
    default: { }

steps:
  - pwsh: |
      $ErrorActionPreference = 'Stop'
      $tfSpec = '${{ parameters.TerraformVersion }}'
      $isWin  = $IsWindows
      
      function Assert-ChocoPath {
        if (-not $isWin) { return }
        $choco = Get-Command choco -ErrorAction SilentlyContinue
        if (-not $choco) {
          $default = 'C:\ProgramData\Chocolatey\bin\choco.exe'
          if (Test-Path $default) {
            $bin = Split-Path $default -Parent
            if ($env:PATH -notmatch [regex]::Escape($bin)) {
              $env:PATH = "$env:PATH;$bin"
            }
          }
        }
      }
      
      function Assert-HomebrewPath {
        if ($isWin) { return }
        if (Get-Command brew -ErrorAction SilentlyContinue) { return }
        $brewExe = '/home/linuxbrew/.linuxbrew/bin/brew'
        if (-not (Test-Path $brewExe)) { $brewExe = '/opt/homebrew/bin/brew' }
        if (Test-Path $brewExe) {
          $shellEnv = & $brewExe shellenv
          Invoke-Expression ($shellEnv -join "`n")
        }
      }
      
      function Download-File($url,$dst) {
        Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
      }
      
      $tenv = Get-Command tenv -ErrorAction SilentlyContinue
      if (-not $tenv) {
        if ($isWin) {
          Assert-ChocoPath
          if (Get-Command choco -ErrorAction SilentlyContinue) {
            choco install tenv -y
          }
          elseif (Get-Command go -ErrorAction SilentlyContinue) {
            go install github.com/tfutils/tenv@latest
            $env:PATH += ';' + (Join-Path $Env:USERPROFILE 'go\bin')
          }
          else {
            $zip  = Join-Path $env:TEMP 'tenv.zip'
            $dest = Join-Path ${env:ProgramFiles} 'tenv'
            New-Item -ItemType Directory -Path $dest -Force | Out-Null
            Download-File "https://github.com/tfutils/tenv/releases/latest/download/tenv_windows_amd64.zip" $zip
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [IO.Compression.ZipFile]::ExtractToDirectory($zip,$dest,$true)
            $env:PATH += ';' + $dest
          }
        }
        else {
          Assert-HomebrewPath
          if (Get-Command brew -ErrorAction SilentlyContinue) {
            brew install tenv
          }
          elseif (Get-Command go -ErrorAction SilentlyContinue) {
            go install github.com/tfutils/tenv@latest
            $env:PATH += ':' + (Join-Path $HOME 'go/bin')
          }
          else {
            $arch = "$(uname -m)" -replace 'x86_64','amd64'
            $os   = (uname).ToLower()
            $tgz  = "/tmp/tenv.tgz"
            Download-File "https://github.com/tfutils/tenv/releases/latest/download/tenv_${os}_${arch}.tar.gz" $tgz
            sudo tar -xzf $tgz -C /usr/local/bin
            sudo chmod +x /usr/local/bin/tenv
          }
        }
        $tenv = Get-Command tenv -ErrorAction SilentlyContinue
        if (-not $tenv) { throw 'Failed to install tenv.' }
      }
      
      switch ($tfSpec) {
        'latest' {
          & tenv tf install latest
          & tenv tf use     latest
          return
        }
        'latest-1' {
          $all = (& tenv tf list-remote) |
                  Select-String '^\d+\.\d+\.\d+$' |
                  ForEach-Object { $_.ToString().Trim() } |
                  Sort-Object { [version]$_ }
          if (-not $all) { throw 'Unable to retrieve remote version list.' }
          $latest      = [version]$all[-1]
          $targetMajor = $latest.Major - 1
          $tfVer = $all |
                    Where-Object { ([version]$_).Major -eq $targetMajor } |
                    Select-Object -Last 1
          if (-not $tfVer) { throw 'No previous major release found.' }
        }
        default {
          if ($tfSpec -match '^\d+(\.\d+){0,2}$') {
            $prefix = [regex]::Escape($tfSpec)
            $tfVer  = (& tenv tf list-remote) |
                      Select-String "^$prefix\.\d+$" |
                      ForEach-Object { $_.ToString().Trim() } |
                      Sort-Object { [version]$_ } |
                      Select-Object -Last 1
            if (-not $tfVer) { throw "No version matches '$tfSpec'." }
          }
          else {
            $tfVer = $tfSpec
          }
        }
      }
      
      & tenv tf install $tfVer
      & tenv tf use     $tfVer
    name: ${{ parameters.StepsName }}
    displayName: ${{ parameters.StepsDisplayName }}
    env:
      ${{ each envVar in parameters.additionalEnvVars }}:
        ${{ envVar.Key }}: ${{ envVar.Value }}
