parameters:
  - name: TerraformCodeLocation
    type: string
    default: 'terraform'
    displayName: 'Terraform Code Path'

  - name: TerraformStackToRunJson
    type: string
    default: '["all"]'
    displayName: 'Terraform Stacks to Run'

  - name: TerraformWorkspace
    type: string
    default: ''
    displayName: 'Terraform Workspace'

  - name: RunTerraformInit
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Run Terraform Init'

  - name: RunTerraformValidate
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Run Terraform Init'

  - name: RunTerraformPlan
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Run Terraform Plan'

  - name: RunTerraformPlanDestroy
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Run Terraform Plan Destroy'

  - name: RunTerraformApply
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Run Terraform Apply'

  - name: RunTerraformDestroy
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Run Terraform Destroy'

  - name: TerraformInitCreateBackendStateFileName
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Whether the script should attempt to make a state file based on stack name'

  - name: TerraformInitCreateBackendStateFilePrefix
    type: string
    default: ""
    displayName: 'Backend prefix'

  - name: TerraformInitCreateBackendStateFileSuffix
    type: string
    default: ""
    displayName: 'Backend suffix'

  - name: TerraformInitExtraArgsJson
    type: string
    default: '[ ]'
    displayName: 'Extra Args for terraform init'

  - name: TerraformPlanExtraArgsJson
    type: string
    default: '[ ]'
    displayName: 'Extra Args for terraform plan'

  - name: TerraformPlanDestroyExtraArgsJson
    type: string
    default: '[ ]'
    displayName: 'Extra Args for terraform plan -destroy'

  - name: TerraformApplyExtraArgsJson
    type: string
    default: '[ ]'
    displayName: 'Extra Args for terraform apply'

  - name: TerraformDestroyExtraArgsJson
    type: string
    default: '[ ]'
    displayName: 'Extra Args for terraform destroy'

  - name: DebugMode
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Enable Debug Logging'

  - name: DeletePlanFiles
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Delete Plan Files After Execution'

  - name: TerraformVersion
    type: string
    default: 'latest'
    displayName: 'Terraform Version'

  - name: RunCheckov
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Run Checkov Scan'

  - name: CheckovSkipCheck
    type: string
    default: ''
    displayName: 'Checkov Skip Checks (Comma-Separated)'

  - name: CheckovSoftfail
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Soft-Fail Checkov Scan'

  - name: CheckovExtraArgsJson
    type: string
    default: '[ ]'
    displayName: 'ExtraArgs for CheckOv as JSON'

  - name: TerraformPlanFileName
    type: string
    default: 'tfplan.plan'
    displayName: 'Terraform Plan File Name'

  - name: TerraformDestroyPlanFileName
    type: string
    default: 'tfplan-destroy.plan'
    displayName: 'Terraform Destroy Plan File Name'

  - name: CreateTerraformWorkspace
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Create or Select Terraform Workspace'

  - name: UseAzureClientSecretLogin
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Use Azure Client Secret Login'

  - name: UseAzureOidcLogin
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Use Azure OIDC Login'

  - name: UseAzureUserLogin
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Use Azure User (Device Code) Login'

  - name: UseAzureManagedIdentityLogin
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Use Azure Managed Identity Login'

  - name: UseAzureServiceConnection
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Use Azure DevOps Service Connection'

  - name: InstallTenvTerraform
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Install Tenv and Terraform'

  - name: InstallAzureCli
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Install Azure CLI'

  - name: AttemptAzureLogin
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Attempt Azure Login in Script'

  - name: InstallCheckov
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Install Checkov'

  - name: ServiceConnection
    type: string
    displayName: 'Azure DevOps Service Connection Name'

  - name: additionalEnvVars
    type: object
    default: { }
    displayName: 'Additional Environment Variables to Export'

  - name: BackendUseAzureADAuth
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Backend Authentication via Azure AD'

  - name: TargetSubscriptionId
    type: string
    default: ''
    displayName: 'Target Azure Subscription ID (Overrides Default)'

  - name: EnableGitLongPaths
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Run Git Long paths enablement'

  - name: ConfigureAzureDevOpsGitUrl
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Configure the Git Azure DevOps URL with insteadof for System.AccessToken injection'

steps:

  - pwsh: |
      git config --system core.longpaths true
    condition: eq(${{ parameters.EnableGitLongPaths }}, 'true')
    displayName: 'Configure Git long paths'

  - checkout: self

  - pwsh: |
      git config --global url."https://$(System.AccessToken)@dev.azure.com/".insteadOf "https://dev.azure.com/"
    condition: eq(${{ parameters.EnableGitLongPaths }}, 'true')
    displayName: 'Configure Azure DevOps Git URL with System.AccessToken injection'

  - task: AzureCLI@2
    displayName: 'Authenticate to Azure & set terraform environment variables'
    condition: eq(${{ parameters.UseAzureServiceConnection }}, 'true')
    name: 'AzureLoginTerraformInitPlan'
    inputs:
      azureSubscription: ${{ parameters.ServiceConnection }}
      scriptType: 'pscore'
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
        Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"

        if ("${{ parameters.TargetSubscriptionId }}" -eq "") {
          $subId = az account show --query id -o tsv
          Write-Host "Using Azure CLI subscription: $subId"
          Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subId"
        } else {
          Write-Host "Using explicitly provided subscription: ${{ parameters.TargetSubscriptionId }}"
          Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]${{ parameters.TargetSubscriptionId }}"
        }

        if ("${{ parameters.UseAzureOidcLogin }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC]true"
          Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN]$env:idToken"
        }
        
        if ("${{ parameters.UseAzureManagedIdentityLogin }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_USE_MSI]true"
        }

        if ("${{ parameters.UseAzureClientSecretLogin }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
        }

        if ("${{ parameters.BackendUseAzureADAuth }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_USE_AZUREAD]true"
        } else {
          Write-Host "##vso[task.setvariable variable=ARM_USE_AZUREAD]false"
        }
      workingDirectory: ${{ parameters.TerraformCodeLocation }}
      addSpnToEnvironment: true


  - pwsh: |
      pwsh -File "$(Build.SourcesDirectory)\Run-AzTerraform.ps1" `
          -TerraformCodeLocation                      '${{ parameters.TerraformCodeLocation }}' `
          -TerraformStackToRunJson                    '${{ parameters.TerraformStackToRunJson }}' `
          -TerraformWorkspace                         '${{ parameters.TerraformWorkspace }}' `
          -RunTerraformInit                           '${{ parameters.RunTerraformInit }}' `
          -RunTerraformValidate                       '${{ parameters.RunTerraformValidate }}' `
          -RunTerraformPlan                           '${{ parameters.RunTerraformPlan }}' `
          -RunTerraformPlanDestroy                    '${{ parameters.RunTerraformPlanDestroy }}' `
          -RunTerraformApply                          '${{ parameters.RunTerraformApply }}' `
          -RunTerraformDestroy                        '${{ parameters.RunTerraformDestroy }}' `
          -TerraformInitCreateBackendStateFileName    '${{ parameters.TerraformInitCreateBackendStateFileName }}' `
          -TerraformInitCreateBackendStateFilePrefix  '${{ parameters.TerraformInitCreateBackendStateFilePrefix }}' `
          -TerraformInitCreateBackendStateFileSuffix  '${{ parameters.TerraformInitCreateBackendStateFileSuffix }}' `
          -TerraformInitExtraArgsJson                 '${{ parameters.TerraformInitExtraArgsJson }}' `
          -TerraformPlanExtraArgsJson                 '${{ parameters.TerraformPlanExtraArgsJson }}' `
          -TerraformPlanDestroyExtraArgsJson          '${{ parameters.TerraformPlanDestroyExtraArgsJson }}' `
          -TerraformApplyExtraArgsJson                '${{ parameters.TerraformApplyExtraArgsJson }}' `
          -TerraformDestroyExtraArgsJson              '${{ parameters.TerraformDestroyExtraArgsJson }}' `
          -DebugMode                                  '${{ parameters.DebugMode }}' `
          -DeletePlanFiles                            '${{ parameters.DeletePlanFiles }}' `
          -TerraformVersion                           '${{ parameters.TerraformVersion }}' `
          -RunCheckov                                 '${{ parameters.RunCheckov }}' `
          -CheckovSkipCheck                           '${{ parameters.CheckovSkipCheck }}' `
          -CheckovSoftfail                            '${{ parameters.CheckovSoftfail }}' `
          -CheckovExtraArgsJson                       '${{ parameters.CheckovExtraArgsJson }}' `
          -TerraformPlanFileName                      '${{ parameters.TerraformPlanFileName }}' `
          -TerraformDestroyPlanFileName               '${{ parameters.TerraformDestroyPlanFileName }}' `
          -CreateTerraformWorkspace                   '${{ parameters.CreateTerraformWorkspace }}' `
          -UseAzureClientSecretLogin                  '${{ parameters.UseAzureClientSecretLogin }}' `
          -UseAzureOidcLogin                          '${{ parameters.UseAzureOidcLogin }}' `
          -UseAzureUserLogin                          '${{ parameters.UseAzureUserLogin }}' `
          -UseAzureManagedIdentityLogin               '${{ parameters.UseAzureManagedIdentityLogin }}' `
          -UseAzureServiceConnection                  '${{ parameters.UseAzureServiceConnection }}' `
          -InstallTenvTerraform                       '${{ parameters.InstallTenvTerraform }}' `
          -InstallAzureCli                            '${{ parameters.InstallAzureCli }}' `
          -AttemptAzureLogin                          '${{ parameters.AttemptAzureLogin }}' `
          -InstallCheckov                             '${{ parameters.InstallCheckov }}'
    name: RunAzTerraformInitPlan
    displayName: 'Run Terraform init & Terraform plan'
    env:
      ${{ if eq(parameters.UseAzureServiceConnection, 'true') }}:
        # Always required with service connection
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_USE_AZUREAD: $(ARM_USE_AZUREAD)

        # Only if using OIDC
        ${{ if eq(parameters.UseAzureOidcLogin, 'true') }}:
          ARM_USE_OIDC: true
          ARM_OIDC_TOKEN: $(ARM_OIDC_TOKEN)

        # Only if using client secret auth
        ${{ if eq(parameters.UseAzureManagedIdentityLogin, 'true') }}:
          ARM_USE_MSI: true

        # Only if using client secret auth
        ${{ if eq(parameters.UseAzureClientSecretLogin, 'true') }}:
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

      # Additional custom env vars
      ${{ each envVar in parameters.additionalEnvVars }}:
        ${{ envVar.Key }}: ${{ envVar.Value }}

  - pwsh: |
      git config --global --unset url."https://$(System.AccessToken)@dev.azure.com/".insteadOf
    condition: eq(${{ parameters.EnableGitLongPaths }}, 'true')
    displayName: 'Unset Azure DevOps Git URL with System.AccessToken injection'

  - pwsh: |
      Remove-Item -Path "$(Agent.BuildDirectory)\*" -Recurse -Force -ErrorAction SilentlyContinue
      Remove-Item -Path "$(Agent.BuildDirectory)\.*" -Recurse -Force -ErrorAction SilentlyContinue
      Remove-Item -Path "$(Agent.BuildDirectory)\s\**\*" -Recurse -Force -ErrorAction SilentlyContinue
      Remove-Item -Path "$(Agent.BuildDirectory)\TestResults" -Recurse -Force -ErrorAction SilentlyContinue
    condition: always()
    displayName: 'Delete workspace files'

