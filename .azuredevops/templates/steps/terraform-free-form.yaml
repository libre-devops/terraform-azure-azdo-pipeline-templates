parameters:
  - name: TerraformCodeLocation
    type: string
    default: 'terraform'
    displayName: 'Terraform Code Path'

  - name: TerraformArguments
    type: string
    default: ''
    displayName: Run Terraform free form commands

  - name: DebugMode
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Enable Debug Logging'

  - name: UseAzureClientSecretLogin
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Use Azure Client Secret Login'

  - name: UseAzureOidcLogin
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Use Azure OIDC Login'

  - name: UseAzureUserLogin
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Use Azure User (Device Code) Login'

  - name: UseAzureManagedIdentityLogin
    type: string
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Use Azure Managed Identity Login'

  - name: UseAzureServiceConnection
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Use Azure DevOps Service Connection'

  - name: ServiceConnection
    type: string
    displayName: 'Azure DevOps Service Connection Name'

  - name: additionalEnvVars
    type: object
    default: { }
    displayName: 'Additional Environment Variables to Export'

  - name: BackendUseAzureADAuth
    type: string
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Backend Authentication via Azure AD'

  - name: TargetSubscriptionId
    type: string
    default: ''
    displayName: 'Target Azure Subscription ID (Overrides Default)'

  - name: EnableGitLongPaths
    values: [ "true", "false" ]
    default: "true"
    displayName: 'Run Git Long paths enablement'

  - name: ConfigureAzureDevOpsGitUrl
    values: [ "true", "false" ]
    default: "false"
    displayName: 'Configure the Git Azure DevOps URL with insteadof for System.AccessToken injection'

steps:

  - pwsh: |
      git config --global core.longpaths true
    condition: eq(${{ parameters.EnableGitLongPaths }}, 'true')
    displayName: 'Configure Git long paths'

  - checkout: self

  - pwsh: |
        Write-Host "Attempting to fetch org name..."
        $collectionUri = "$(System.CollectionUri)".TrimEnd('/')
        $org = ($collectionUri.Split('/')[-1])
      
        Write-Host "Org name is: $org"
      
        if ($Env:SYSTEM_ACCESSTOKEN) {
        Write-Host "Token length: $($Env:SYSTEM_ACCESSTOKEN.Length)"
          } else {
            Write-Host "SYSTEM_ACCESSTOKEN is EMPTY"
          }
      
        git config --global url."https://$(System.AccessToken)@dev.azure.com/".insteadOf "https://dev.azure.com/"
    condition: eq(${{ parameters.ConfigureAzureDevOpsGitUrl }}, 'true')
    displayName: 'Configure Azure DevOps Git URL with System.AccessToken injection'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - task: AzureCLI@2
    displayName: 'Authenticate to Azure & set terraform environment variables'
    condition: eq(${{ parameters.UseAzureServiceConnection }}, 'true')
    name: 'AzureLoginTerraformInitPlan'
    inputs:
      azureSubscription: ${{ parameters.ServiceConnection }}
      scriptType: 'pscore'
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
        Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"

        if ("${{ parameters.TargetSubscriptionId }}" -eq "") {
          $subId = az account show --query id -o tsv
          Write-Host "Using Azure CLI subscription: $subId"
          Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subId"
        } else {
          Write-Host "Using explicitly provided subscription: ${{ parameters.TargetSubscriptionId }}"
          Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]${{ parameters.TargetSubscriptionId }}"
        }

        if ("${{ parameters.UseAzureOidcLogin }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC]true"
          Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN]$env:idToken"
        }
        
        if ("${{ parameters.UseAzureManagedIdentityLogin }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_USE_MSI]true"
        }

        if ("${{ parameters.UseAzureClientSecretLogin }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
        }

        if ("${{ parameters.BackendUseAzureADAuth }}" -eq "true") {
          Write-Host "##vso[task.setvariable variable=ARM_USE_AZUREAD]true"
        } else {
          Write-Host "##vso[task.setvariable variable=ARM_USE_AZUREAD]false"
        }
      workingDirectory: ${{ parameters.TerraformCodeLocation }}
      addSpnToEnvironment: true


  - pwsh: |

      terraform ${{ parameters.TerraformArguments }}
    name: RunTerraformFreeForm
    displayName: 'Run Terraform free form commands'
    env:
      ${{ if eq(parameters.UseAzureServiceConnection, 'true') }}:
        # Always required with service connection
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_USE_AZUREAD: $(ARM_USE_AZUREAD)

        # Only if using OIDC
        ${{ if eq(parameters.UseAzureOidcLogin, 'true') }}:
          ARM_USE_OIDC: true
          ARM_OIDC_TOKEN: $(ARM_OIDC_TOKEN)

        # Only if using client secret auth
        ${{ if eq(parameters.UseAzureManagedIdentityLogin, 'true') }}:
          ARM_USE_MSI: true

        # Only if using client secret auth
        ${{ if eq(parameters.UseAzureClientSecretLogin, 'true') }}:
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)

      # Additional custom env vars
      ${{ each envVar in parameters.additionalEnvVars }}:
        ${{ envVar.Key }}: ${{ envVar.Value }}


  - pwsh: |
      git config --global --unset url."https://$(System.AccessToken)@dev.azure.com/".insteadOf
    condition: eq(${{ parameters.ConfigureAzureDevOpsGitUrl }}, 'true')
    displayName: 'Unset Git long paths'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - pwsh: |
      git config --global --unset core.longpaths
    condition: eq(${{ parameters.EnableGitLongPaths }}, 'true')
    displayName: 'Unset Azure DevOps Git URL with System.AccessToken injection'

  - pwsh: |
      Remove-Item -Path "$(Agent.BuildDirectory)\*" -Recurse -Force -ErrorAction SilentlyContinue
      Remove-Item -Path "$(Agent.BuildDirectory)\.*" -Recurse -Force -ErrorAction SilentlyContinue
      Remove-Item -Path "$(Agent.BuildDirectory)\s\**\*" -Recurse -Force -ErrorAction SilentlyContinue
      Remove-Item -Path "$(Agent.BuildDirectory)\TestResults" -Recurse -Force -ErrorAction SilentlyContinue
    condition: always()
    displayName: 'Delete workspace files'

